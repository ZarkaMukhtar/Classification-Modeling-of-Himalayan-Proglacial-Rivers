// uploading satellite imagery
var KholaIK2003 = ee.Image("projects/ee-zmukhtar/assets/PlanetekImages/Langtang2003IKMosaic");
// uploading areas of intersts
var aoi = ee.FeatureCollection("projects/gee-zmukhtar/assets/2003KholaReach1");
var aoi2 = ee.FeatureCollection("projects/gee-zmukhtar/assets/2003KholaReach2");
var aoi3 = ee.FeatureCollection("projects/gee-zmukhtar/assets/2003KholaReach3");

//clipping images with aoi shapefiles
var KholaIK_2003 = KholaIK2003.clip(aoi3)
Map.addLayer(KholaIK_2003, {color:'blue'},'KholaIK_2003', false);

// renaming the band tags into band names
var B3= KholaIK_2003.select('b3')//.rename("green")
var B4 = KholaIK_2003.select('b4')//.rename("nir")

// making band combination, or in other words- to select the required bands
var predictors = B4
.addBands(B3)
print('predictors: ', predictors);

// making Normalised Difference Water Index raster file
var Khola_IK2003ndwi = B3.subtract(B4).divide(B3.add(B4)).rename('ndwi'); 

// selectinga and merging into single training dataset (polygons) file
var trainingData = KholaVeg2003IK.merge(Kholawater2003IK).merge(KholaSed2003IK);
print(trainingDataKhola2003, 'trainingDataKhola2003')

// splitting data training dataset in callibration dataset and validation dataset
var random_columnKhola2003 = trainingData.randomColumn();
var Calibration_sample = random_columnKhola2003.filter(ee.Filter.gte('random',0.3)); // 70% (70/100) gte training
var validation_sample = random_columnKhola2003.filter(ee.Filter.lte('random',0.3)); // 30%
print ('cali', Calibration_sample)
print ('vali', validation_sample)

// callibration sampling
var CsampledKhola2003 = KholaIK_2003.sampleRegions({
  collection: Calibration_sample,
  properties: ['LC'],
  scale: 2.5
});
print (CsampledKhola2003, 'CsampledKhola2003')


//Training Classifier Random Forest
var trainingclassifier = ee.Classifier.smileRandomForest({
                  numberOfTrees: 100,
                  seed: 7})
.train({
  features: CsampledKhola2003,
  classProperty: 'LC',
  inputProperties: ['B3','B4'],
}).setOutputMode('classification');
print(trainingclassifier, 'trainingclassifier');

// checking training accuracy
var trainAccuracy = trainingclassifier.confusionMatrix();
print('Resubstitution error matrix: ', trainAccuracy);
print('Training overall accuracy: ', trainAccuracy.accuracy());

// classifying images
var KholaIK2003clsfd = KholaIK_2003.classify(trainingclassifier);
Map.addLayer(KholaIK2003clsfd, {min:0, max:2, palette:['green', 'blue', 'gray']}, 'KholaIK2003clsfd');
Map.centerObject(KholaIK2003clsfd);

// calculating area (sq km) of geomorphic units from classified images
var all_classes_area = ee.Image.pixelArea().addBands(KholaIK2003clsfd).divide(1e6)
                      .reduceRegion({
                        reducer: ee.Reducer.sum().group(1), 
                        geometry: aoi3,
                        scale: 2.5,
                        bestEffort: true
})
print(all_classes_area, 'Siachen1991_VBE_Area_km2')

//validation sampling
var Vsampled = KholaIK_2003.sampleRegions({
  collection: validation_sample,
  properties: ['LC'],
  scale: 2.5
});
print(Vsampled, 'Vsampled')
var Validation = Vsampled.classify(trainingclassifier);
print (Validation, 'Validation')

//error matrix claculation
var error_matrix = Validation.errorMatrix({
  actual:'LC',
  predicted:'classification',
});
print (error_matrix, 'EMmodel')
var total_accuracy = error_matrix.accuracy();
print(total_accuracy, 'total_accuracyModel')

var user_accuracy = error_matrix.consumersAccuracy();
print(user_accuracy, 'user_accuracy')
 
var pro_accuracy = error_matrix.producersAccuracy();
print(pro_accuracy, "pro_accuracy")
 
var kappa = error_matrix.kappa();
print(kappa, 'kappa');
